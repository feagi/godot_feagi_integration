@tool
extends Object
class_name FEAGI_PLUGIN_CONFIG
## A "static" class with only static / const members, to be used as a centeral plugin config location and place where static functions can be kept, as there are issues with exported projects using [EditorPlugin] extended scripts as of Godot 4.3

const CONFIG_DIR: StringName = "res://FEAGI_config/"
const CONFIG_ENDPOINT_NAME: StringName = "endpoint.tres"
const CONFIG_GENOME_NAME: StringName = "genome_mapping.tres"
const CONFIG_GITIGNORE_TEXT: StringName = "# This gitignore is automatically generated by the Godot FEAGI Integration plugin and will be recreated if missing. The following file may contain sensitive information, hence the creation of this file. To disable this gitignore, simple comment out the files affected and save.\n" + CONFIG_ENDPOINT_NAME
const TEMPLATE_DIR: StringName = "res://addons/FeagiIntegration/Editor/Resources/template.json"

#WARNING: Make sure you also update the exports of [FEAGI_RunTime_GodotDeviceAgent_Sensory] and [FEAGI_RunTime_GodotDeviceAgent_Motor]!
const GODOT_SUPPORTED_SENSORS: PackedStringArray = ["camera", "gyro", "proximity", "accelerometer"] ## All supported FEAGI Sensor devices that have Godot components available to emulate
const GODOT_SUPPORTED_MOTORS: PackedStringArray = ["motion_control", "motor", "misc"] ## All supported FEAGI Sensor devices that have Godot components available to emulate

#NOTE: Yes these return strings due to godot casting shenanigans
static func get_gitignore_path() -> String:
	return CONFIG_DIR + ".gitignore"

static func get_endpoint_path() -> String:
	return CONFIG_DIR + CONFIG_ENDPOINT_NAME

static func get_genome_mapping_path() -> String:
	return CONFIG_DIR + CONFIG_GENOME_NAME

static func confirm_config_directory() -> void:
	if not DirAccess.dir_exists_absolute(CONFIG_DIR):
		DirAccess.make_dir_absolute(CONFIG_DIR)
	if not FileAccess.file_exists(get_gitignore_path()):
		var file: FileAccess = FileAccess.open(get_gitignore_path(), FileAccess.WRITE)
		file.store_string(CONFIG_GITIGNORE_TEXT)
		file.close()

static func does_mapping_file_exist() -> bool:
	return ResourceLoader.exists(get_genome_mapping_path())

static func does_endpoint_file_exist() -> bool:
	return ResourceLoader.exists(get_endpoint_path())
